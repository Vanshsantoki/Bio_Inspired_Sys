import numpy as np
import cv2
import random

# Example fitness function: Otsu's method
def fitness_function(image, thresholds):
    thresholds = sorted(thresholds)
    hist, bins = np.histogram(image.ravel(), 256, [0, 256])
    total_pixels = image.size

    thresholds = [0] + thresholds + [256]
    variance = 0

    for i in range(len(thresholds) - 1):
        start, end = thresholds[i], thresholds[i + 1]
        prob = np.sum(hist[start:end]) / total_pixels
        if prob > 0:
            mean = np.sum([j * hist[j] for j in range(start, end)]) / np.sum(hist[start:end])
            variance += prob * mean**2

    return variance  # maximize between-class variance

# Grey Wolf Optimizer with γ wolf
def GWO(image, search_agents=10, max_iter=50, dim=2):
    lb, ub = 0, 255
    wolves = np.random.randint(lb, ub, (search_agents, dim))
    
    # Initialize α, β, δ, γ wolves
    alpha, beta, delta, gamma = np.zeros(dim), np.zeros(dim), np.zeros(dim), np.zeros(dim)
    alpha_score, beta_score, delta_score, gamma_score = -np.inf, -np.inf, -np.inf, -np.inf

    # Initial evaluation
    for wolf in wolves:
        score = fitness_function(image, wolf)
        if score > alpha_score:
            alpha_score, alpha = score, wolf.copy()
        elif score > beta_score:
            beta_score, beta = score, wolf.copy()
        elif score > delta_score:
            delta_score, delta = score, wolf.copy()
        elif score > gamma_score:
            gamma_score, gamma = score, wolf.copy()

    # Iterative optimization
    for t in range(max_iter):
        a = 2 - t * (2 / max_iter)  # control parameter decreases from 2 → 0
        for i in range(search_agents):
            for j in range(dim):
                r1, r2 = random.random(), random.random()
                A = 2 * a * r1 - a
                C = 2 * r2

                D_alpha = abs(C * alpha[j] - wolves[i][j])
                D_beta = abs(C * beta[j] - wolves[i][j])
                D_delta = abs(C * delta[j] - wolves[i][j])
                D_gamma = abs(C * gamma[j] - wolves[i][j])

                X1 = alpha[j] - A * D_alpha
                X2 = beta[j] - A * D_beta
                X3 = delta[j] - A * D_delta
                X4 = gamma[j] - A * D_gamma

                wolves[i][j] = np.clip((X1 + X2 + X3 + X4) / 4, lb, ub)

            # Recalculate fitness
            score = fitness_function(image, wolves[i])
            if score > alpha_score:
                alpha_score, alpha = score, wolves[i].copy()
            elif score > beta_score:
                beta_score, beta = score, wolves[i].copy()
            elif score > delta_score:
                delta_score, delta = score, wolves[i].copy()
            elif score > gamma_score:
                gamma_score, gamma = score, wolves[i].copy()

    return alpha, alpha_score

# Example usage
image = cv2.imread("example.jpg", cv2.IMREAD_GRAYSCALE)
best_thresholds, score = GWO(image, search_agents=15, max_iter=30, dim=2)
print("Best thresholds:", best_thresholds)
